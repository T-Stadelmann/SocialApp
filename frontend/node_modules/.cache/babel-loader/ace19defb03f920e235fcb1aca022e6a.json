{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildFormatter;\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n} // If the numbers array is present, format numbers with it,\n// otherwise just cast the number to a string and return it\n\n\nvar normalizeNumber = function normalizeNumber(numbers, value) {\n  return numbers && numbers.length === 10 ? String(value).split('').map(function (digit) {\n    return digit.match(/^[0-9]$/) ? numbers[parseInt(digit)] : digit;\n  }).join('') : String(value);\n}; // Take a string or a function that takes number of days and returns a string\n// and provide a uniform API to create string parts\n\n\nvar normalizeFn = function normalizeFn(value, distanceMillis, numbers) {\n  return function (stringOrFn) {\n    return typeof stringOrFn === 'function' ? stringOrFn(value, distanceMillis).replace(/%d/g, normalizeNumber(numbers, value)) : stringOrFn.replace(/%d/g, normalizeNumber(numbers, value));\n  };\n};\n\nfunction buildFormatter(strings) {\n  return function formatter(value, unit, suffix, epochMiliseconds, _nextFormmater, now) {\n    var current = now(); // convert weeks to days if strings don't handle weeks\n\n    if (unit === 'week' && !strings.week && !strings.weeks) {\n      var _days = Math.round(Math.abs(epochMiliseconds - current) / (1000 * 60 * 60 * 24));\n\n      value = _days;\n      unit = 'day';\n    } // create a normalize function for given value\n\n\n    var normalize = normalizeFn(value, current - epochMiliseconds, strings.numbers != null ? strings.numbers : undefined); // The eventual return value stored in an array so that the wordSeparator can be used\n\n    var dateString = []; // handle prefixes\n\n    if (suffix === 'ago' && strings.prefixAgo) {\n      dateString.push(normalize(strings.prefixAgo));\n    }\n\n    if (suffix === 'from now' && strings.prefixFromNow) {\n      dateString.push(normalize(strings.prefixFromNow));\n    } // Handle Main number and unit\n\n\n    var isPlural = value > 1;\n\n    if (isPlural) {\n      var stringFn = strings[unit + 's'] || strings[unit] || '%d ' + unit;\n      dateString.push(normalize(stringFn));\n    } else {\n      var _stringFn = strings[unit] || strings[unit + 's'] || '%d ' + unit;\n\n      dateString.push(normalize(_stringFn));\n    } // Handle Suffixes\n\n\n    if (suffix === 'ago' && strings.suffixAgo) {\n      dateString.push(normalize(strings.suffixAgo));\n    }\n\n    if (suffix === 'from now' && strings.suffixFromNow) {\n      dateString.push(normalize(strings.suffixFromNow));\n    } // join the array into a string and return it\n\n\n    var wordSeparator = typeof strings.wordSeparator === 'string' ? strings.wordSeparator : ' ';\n    return dateString.join(wordSeparator);\n  };\n}","map":{"version":3,"sources":["/home/tracey/Desktop/BootCamp/Week7/Day4/day4/frontend/node_modules/react-timeago/lib/formatters/buildFormatter.js"],"names":["Object","defineProperty","exports","value","default","buildFormatter","_react","require","React","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","normalizeNumber","numbers","length","String","split","map","digit","match","parseInt","join","normalizeFn","distanceMillis","stringOrFn","replace","strings","formatter","unit","suffix","epochMiliseconds","_nextFormmater","now","current","week","weeks","_days","Math","round","abs","normalize","undefined","dateString","prefixAgo","push","prefixFromNow","isPlural","stringFn","_stringFn","suffixAgo","suffixFromNow","wordSeparator"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildFormatter;\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// If the numbers array is present, format numbers with it,\n// otherwise just cast the number to a string and return it\nvar normalizeNumber = function normalizeNumber(numbers, value) {\n  return numbers && numbers.length === 10 ? String(value).split('').map(function (digit) {\n    return digit.match(/^[0-9]$/) ? numbers[parseInt(digit)] : digit;\n  }).join('') : String(value);\n};\n\n// Take a string or a function that takes number of days and returns a string\n// and provide a uniform API to create string parts\n\n\nvar normalizeFn = function normalizeFn(value, distanceMillis, numbers) {\n  return function (stringOrFn) {\n    return typeof stringOrFn === 'function' ? stringOrFn(value, distanceMillis).replace(/%d/g, normalizeNumber(numbers, value)) : stringOrFn.replace(/%d/g, normalizeNumber(numbers, value));\n  };\n};\n\nfunction buildFormatter(strings) {\n  return function formatter(value, unit, suffix, epochMiliseconds, _nextFormmater, now) {\n    var current = now();\n    // convert weeks to days if strings don't handle weeks\n    if (unit === 'week' && !strings.week && !strings.weeks) {\n      var _days = Math.round(Math.abs(epochMiliseconds - current) / (1000 * 60 * 60 * 24));\n      value = _days;\n      unit = 'day';\n    }\n\n    // create a normalize function for given value\n    var normalize = normalizeFn(value, current - epochMiliseconds, strings.numbers != null ? strings.numbers : undefined);\n\n    // The eventual return value stored in an array so that the wordSeparator can be used\n    var dateString = [];\n\n    // handle prefixes\n    if (suffix === 'ago' && strings.prefixAgo) {\n      dateString.push(normalize(strings.prefixAgo));\n    }\n    if (suffix === 'from now' && strings.prefixFromNow) {\n      dateString.push(normalize(strings.prefixFromNow));\n    }\n\n    // Handle Main number and unit\n    var isPlural = value > 1;\n    if (isPlural) {\n      var stringFn = strings[unit + 's'] || strings[unit] || '%d ' + unit;\n      dateString.push(normalize(stringFn));\n    } else {\n      var _stringFn = strings[unit] || strings[unit + 's'] || '%d ' + unit;\n      dateString.push(normalize(_stringFn));\n    }\n\n    // Handle Suffixes\n    if (suffix === 'ago' && strings.suffixAgo) {\n      dateString.push(normalize(strings.suffixAgo));\n    }\n    if (suffix === 'from now' && strings.suffixFromNow) {\n      dateString.push(normalize(strings.suffixFromNow));\n    }\n\n    // join the array into a string and return it\n    var wordSeparator = typeof strings.wordSeparator === 'string' ? strings.wordSeparator : ' ';\n    return dateString.join(wordSeparator);\n  };\n}"]},"metadata":{},"sourceType":"script"}